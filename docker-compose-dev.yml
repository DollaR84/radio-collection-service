x-default-logging: &default-logging
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"

services:
  db:
    <<: *default-logging
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    image: postgres
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB_NAME}
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USERNAME}"]
      interval: 3s
      timeout: 3s
      retries: 5

  redis:
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    image: redis:alpine
    env_file: .env
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 3s
      timeout: 3s
      retries: 5

  api:
    <<: *default-logging
    build:
      context: ./backend
      dockerfile: Dockerfile
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    image: radio-collection-service-api
    env_file: .env
    command: ["--workers", "4"]
    volumes:
      - ./backend/src/migration/versions:/app/migration/versions
      - ./backend/src/templates:/app/templates
      - ./shared_data:/app/data
    user: "1000:1000"
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  web:
    <<: *default-logging
    build:
      context: ./frontend
      dockerfile: Dockerfile
    platform: ${DOCKER_PLATFORM:-linux/amd64}
    env_file: .env
    ports:
      - "3000:80"
      - "80:80"
    volumes:
      - ./frontend/src:/app/web/src
      - /app/web/node_modules
    depends_on:
      api:
        condition: service_healthy
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  worker:
    <<: *default-logging
    image: radio-collection-service-api
    env_file: .env
    entrypoint: ["python", "-m"]
    command: "workers.worker"
    volumes:
      - /etc/ssl/certs:/etc/ssl/certs:ro
      - ./shared_data:/app/data
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always

  loki:
    image: grafana/loki
    ports:
      - "3100:3100"
    command:
      -config.file=/etc/loki/config.yaml
    volumes:
      - ./loki:/etc/loki
      - loki_data:/var/loki
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 3s
      retries: 5

  promtail:
    image: grafana/promtail
    command:
      -config.file=/etc/promtail/config.yml
    volumes:
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./promtail-config.yaml:/etc/promtail/config.yml

  grafana:
    image: grafana/grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      loki:
        condition: service_healthy

  caddy:
    image: caddy:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      api:
        condition: service_healthy
      web:
        condition: service_healthy
    networks:
      - default

volumes:
  postgres_data:
  redis_data:
  loki_data:
  grafana_data:
  caddy_data:
  caddy_config:
